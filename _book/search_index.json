[
["index.html", "RStudio 2020 Internship Application 1 Overview", " RStudio 2020 Internship Application Riccardo Esclapon 1 Overview Start the video below for a 2 minute overview of what you are currently looking at: The video is best viewed in fullscreen, hover over the window above for the option "],
["fit.html", "2 What makes me a good fit 2.1 I ❤️ .Rmd files 2.2 Automation 2.3 Fit Within the Company", " 2 What makes me a good fit Here are some of the things I believe make me a great fit for the internship: 2.1 I ❤️ .Rmd files I was completely blown away by the R Markdown file format when I first discovered it, and I definitely felt like the courses I took in college in R should have mentioned the .Rmd format, as well as the tidyverse and the idea behind the pipe operator. I have spent a lot of my time learning R Markdown and digging through books and amazing resources made available by RStudio, so here are some of my favorite output formats that I am looking to teach people more about: 2.1.1 Learnr I have been using learnr for about a year and a half, and recently I started to offer programming tutorials on my website using learnr where every time the tutorial is opened, users learn to program in R using data from the cryptocurrency markets that is never outdated by more than 1 hour: (this takes about 30 seconds to load, give it more time if it’s showing up blank) I would recommend looking at the Visualization section to visually see that the data is never outdated by more than 1 hour. I post these on my website: I’m loving the integrated tutorials tab within RStudio in the 1.3 preview and I am working towards including these with my PredictCrypto package, which I talk more about and use in the next section of this document. 2.1.2 Bookdown I was very close to paying for a monthly subscription on gitbook.com because I thought it was such an amazing format to provide documentation through, so I was particularly impressed by and grateful for the bookdown (Xie 2020) package, and these days it’s my go to for organizing most things I work on, so why not my application? This document is obviously an example of a bookdown document in itself, but here’s another guide I put together using bookdown: This guide refreshes daily in order to show a preview of the latest data within the document and you can look at the GitHub Actions daily runs here. You can also see the refreshed data in the useful tables section of the document. I also found that documentation done in bookdown can work really great when working within a large company as well, and I put together some very thorough documentation for a project using bookdown that was very well received (but I can’t show here). In my particular case it worked really well because I could send the link to the html index of the bookdown document and when opened it would behave like a website hosted on the shared folders within the secure network which ended up being particularly simple and effective. 2.1.3 Presentations I am a big fan of ioslides and revealjs in particular as R Markdown outputs. I find the revealjs output to be incredibly cool with the rotating cube animation, and the ability to not only move forward but move downward adds a surprisingly useful tool to break down topics; ioslides is just really clean, well made and easy to use and looks great with widescreen enabled. I aspire to be an expert in Xaringan one day but am not currently. Making presentations in R Markdown is what really got me working with .Rmd files, because I started working towards a very specific project using an idea I haven’t really seen elsewhere of creating presentations that give the user options and as they make their way through the slides, those options affect not only what they see in the slides that come afterwards, but also the options they are given. For example, the user could choose to do an analysis for a particular asset, then choose the main category of the analysis to perform, then the sub-category of the analysis and so on, until by the end of the presentation the user has performed an analysis that was completely unique and tailored to their preferences and interests. See the gif below for an example of what this looks like: 2.1.4 Blogdown Blogdown(Xie 2019) and bookdown work very similarly, so most of what I mentioned in the bookdown section applies here. Because my website predictcrypto.com only shows the latest data based on the current date, I leverage blogdown to create weekly snapshots of the visualizations over the last 7 day period: https://predictcryptoblog.com/. Because all these systems work so well with automation, as I keep adding new interesting content to my website I can also add archives of that content using blogdown. 2.1.5 Pagedown Pagedown(Xie, Lesur, and Thorne 2020) is yet another awesome way to create html outputs and I used Nick Strayer’s repository https://github.com/nstrayer/cv to build my cv and resume using his template: Big thanks to Nick Strayer for the awesome template! 2.1.6 Flexdashboard Flexdashboards (Iannone, Allaire, and Borges 2018) were my first introduction to shiny apps and I was completely blown away by that framework and have used it for several projects and is one of my absolute favorite tools. To get some practice, I converted some of the content found in Tidy Text Mining by Julia Silge and David Robinson and made it into a flexdashboard. I made no changes to the code found within the book, this was simply an experiment to learn more about flexdashboards and semantic analysis: 2.2 Automation Automation is at the center of everything I do and my one true passion. One of my big goals for RStudio::conf 2020 was to learn more about automating things through GitHub using CI since I always had a hard time figuring that out, and the things I learned about especially relating to GitHub actions and using Netlify were above my expectations in terms of the ease of use, capabilities and free tier offerings, and I am super excited to share how crazy simple automating a very complex process can be through RStudio, GitHub Actions and Netlify. I didn’t fnd a huge wealth of information on automating things in R through GitHub Actions and I’m excited to share those learnings in the months to come. It’s pretty mindblowing that these frameworks allow a user to create an interactive book with complex javascript, HTML, CSS, TeX, etc… from scratch, deploy it to an https secured website and create an automated process around it, all in less than 10 minutes with minimal code involved. What’s even more powerful, is that the same methodologies can be applied to make other interfaces and outputs, like making a blogdown website, and I can’t speak highly enough of all the work Yihui blessed us all with. I have also done a lot of automation work for Vail Resorts using a tool called Alteryx to create fully automated processes with the main purpose of refreshing Tableau dashboards offering refreshed datasets relating to ski pass sales. You can find an example of an automated Alteryx process I created for a personal project doing automated trading on the cryptocurrency markets using my own database, SQL, R and Python here: https://community.alteryx.com/t5/Alteryx-Use-Cases/Predicting-and-Trading-on-the-Cryptocurrency-Markets-using/ta-p/494058 2.3 Fit Within the Company After following along with the RStudio::conf 2019 as it was happening, I knew I had to make it out to RStudio::conf 2020, and it was a truly incredible experience. I learned everything I was hoping to learn about and then some, and JJ’s talk and BCorp announcement really resonated with me. Generally speaking my philosophy is that the most straightforward way to success is to help other people succeed, and I believe I share the values that RStudio holds dear as a company. The content of JJ’s talk around the model that companies currently operate under, the pursuit of profit being a legal obligation, how we got to this point, and the need for this model to evolve, was inspirational. I am very impressed by RStudio taking a strong stance in this area and I agree with JJ’s message wholeheartedly. Another thing I was really impressed with was the focus and clarity around why everything should be reproducible and how not making your work publicly available can often be very costly in many different ways. RStudio has done an incredible job at making powerful and complex frameworks easy for anyone to use. I am driven to making easy to follow and informative content to help other “fellow self-taught programmers who were told they weren’t good enough but are too driven and excited to care” (Gans 2020) in the same spirit of former superstar interns like Maya. I also want to give Maya a shoutout for her amazing tidyblocks project; in college I learned to use an incredible tool called Alteryx and I have become somewhat of an expert in it, but it’s a publicly traded company and since I have learned to use it the price has gone up from an already ridiculous ~$3.5k a year to now being $5,195 a year, and as JJ pointed out in his talk this type of model is not a long-term sustainable model for programming software, and forget about reproducibility and outside access. The tidyblocks project works in a fundamentally different way because of the scratch-like design, but it’s actually got the main pieces to replicate what Alteryx does (which I believe is actually mostly built using R when processing data), and that’s been one of my main goals since tuning in for RStudio::conf 2019, so I have just started making my way through her Javascript for Data Science book and in mid-late 2021 I hope to be able to start making some contributions to that project. I work well both in-person and remotely. I have a dedicated home office to do my independent work in, with a powerful desktop PC and two monitors. I have experience working remotely and keeping myself accountable without someone looking over my shoulder. References "],
["ideal-projects.html", "3 Projects Well Suited For 3.1 Create resources for people working with spreadsheets in R 3.2 Build interactive learnr tutorials for tidymodels 3.3 Build interactive learnr tutorials for Python using reticulate", " 3 Projects Well Suited For 3.1 Create resources for people working with spreadsheets in R What better way to show I am suited for a project than to give a hands-on example? See the code below for a use-case using googlesheets4(Bryan 2020). First I will go ahead and import every package in the tidyverse(Wickham 2019): library(tidyverse) We will be importing the following spreadsheet: spreadsheet_url &lt;- &quot;https://docs.google.com/spreadsheets/d/1_zRBFrB1au7qhxuDDfDuh_bPLGd6RLrwOL5oQ3sBBX4/edit?usp=sharing&quot; Before importing the data, let’s use tictoc (Izrailev 2014) to measure how long each step takes. I am using tic() to start the time for both the total execution time and for the step reading the data in. After importing the data we will run toc() to get the execution time for that step. library(tictoc) tic(&#39;Total section 3 runtime&#39;) tic(&#39;Read googlesheets data&#39;) Now let’s import the googlesheets4 and read a spreadsheet I made for this internship application, specifying the sheet called coinmetrics_preview inside the function read_sheet(): library(googlesheets4) googlesheets_data &lt;- read_sheet(spreadsheet_url, sheet = &#39;coinmetrics_preview&#39;) %&gt;% as.data.frame() # won&#39;t work with Github Actions toc() ## Read googlesheets data: 42.08 sec elapsed Let’s take a peek at the first 1,000 rows using DT::datatable() (Xie, Cheng, and Tan 2019) library(DT) datatable(head(googlesheets_data,1000), style = &quot;default&quot;, options = list(scrollX = TRUE, pageLength=5,dom=&#39;t&#39;), rownames = F) This data is sourced from the website coinmetrics.io How many rows in the dataset? nrow(googlesheets_data) ## [1] 11995 Coinmetrics also provides a data dictionary to go along with the data: 3.2 Build interactive learnr tutorials for tidymodels 3.2.1 Data Prep Using the data from coinmetrics, I will create a predictive model to forecast the percentage change in price over time. First, I will import a package that I am making that is still in development PredictCrypto: library(PredictCrypto) (this is an in-development tool that I will use for a research paper I am working on) I attended the two day building tidy tools workshop working with Charlotte and Hadley at RStudio::conf 2020 and I am comfortable writing packages in R as well as using testthat and showing code coverage for a repository. Here is the GitHub Pages environment associated with the repository: I am going to convert the column names from CamelCase to snake_case using the janitor(Firke 2020) package because the functions in my package use snake_case and I want to avoid mixing the two: Before: ## [1] &quot;Date&quot; &quot;Symbol&quot; &quot;AdrActCnt&quot; &quot;BlkCnt&quot; &quot;BlkSizeByte&quot; &quot;BlkSizeMeanByte&quot; &quot;CapMVRVCur&quot; ## [8] &quot;CapMrktCurUSD&quot; &quot;CapRealUSD&quot; &quot;DiffMean&quot; &quot;FeeMeanNtv&quot; &quot;FeeMeanUSD&quot; &quot;FeeMedNtv&quot; &quot;FeeMedUSD&quot; ## [15] &quot;FeeTotNtv&quot; &quot;FeeTotUSD&quot; &quot;HashRate&quot; &quot;IssContNtv&quot; &quot;IssContPctAnn&quot; &quot;IssContUSD&quot; &quot;IssTotNtv&quot; ## [22] &quot;IssTotUSD&quot; &quot;NVTAdj&quot; &quot;NVTAdj90&quot; &quot;PriceBTC&quot; &quot;PriceUSD&quot; &quot;ROI1yr&quot; &quot;ROI30d&quot; ## [29] &quot;SplyCur&quot; &quot;TxCnt&quot; &quot;TxTfrCnt&quot; &quot;TxTfrValAdjNtv&quot; &quot;TxTfrValAdjUSD&quot; &quot;TxTfrValMeanNtv&quot; &quot;TxTfrValMeanUSD&quot; ## [36] &quot;TxTfrValMedNtv&quot; &quot;TxTfrValMedUSD&quot; &quot;TxTfrValNtv&quot; &quot;TxTfrValUSD&quot; &quot;VtyDayRet180d&quot; &quot;VtyDayRet30d&quot; &quot;VtyDayRet60d&quot; ## [43] &quot;DateTimeUTC&quot; library(janitor) googlesheets_data &lt;- clean_names(googlesheets_data) After: ## [1] &quot;date&quot; &quot;symbol&quot; &quot;adr_act_cnt&quot; &quot;blk_cnt&quot; &quot;blk_size_byte&quot; &quot;blk_size_mean_byte&quot; ## [7] &quot;cap_mvrv_cur&quot; &quot;cap_mrkt_cur_usd&quot; &quot;cap_real_usd&quot; &quot;diff_mean&quot; &quot;fee_mean_ntv&quot; &quot;fee_mean_usd&quot; ## [13] &quot;fee_med_ntv&quot; &quot;fee_med_usd&quot; &quot;fee_tot_ntv&quot; &quot;fee_tot_usd&quot; &quot;hash_rate&quot; &quot;iss_cont_ntv&quot; ## [19] &quot;iss_cont_pct_ann&quot; &quot;iss_cont_usd&quot; &quot;iss_tot_ntv&quot; &quot;iss_tot_usd&quot; &quot;nvt_adj&quot; &quot;nvt_adj90&quot; ## [25] &quot;price_btc&quot; &quot;price_usd&quot; &quot;roi1yr&quot; &quot;roi30d&quot; &quot;sply_cur&quot; &quot;tx_cnt&quot; ## [31] &quot;tx_tfr_cnt&quot; &quot;tx_tfr_val_adj_ntv&quot; &quot;tx_tfr_val_adj_usd&quot; &quot;tx_tfr_val_mean_ntv&quot; &quot;tx_tfr_val_mean_usd&quot; &quot;tx_tfr_val_med_ntv&quot; ## [37] &quot;tx_tfr_val_med_usd&quot; &quot;tx_tfr_val_ntv&quot; &quot;tx_tfr_val_usd&quot; &quot;vty_day_ret180d&quot; &quot;vty_day_ret30d&quot; &quot;vty_day_ret60d&quot; ## [43] &quot;date_time_utc&quot; Now that I imported the PredictCrypto package and the data is in snake_case, I can use the function calculate_percent_change() to create the target variable to predict. Before I can do that however, I need one more adjustment to the date/time fields, so let’s do that using the anytime(Eddelbuettel 2020) package: library(anytime) googlesheets_data$date &lt;- anytime(googlesheets_data$date) googlesheets_data$date_time_utc &lt;- anytime(googlesheets_data$date_time_utc) Now I can use the function calculate_percent_change() to calculate the % change of the price of each cryptocurrency and add a new column target_percent_change to each row, which will represent the percentage change in price for the 7 day period that came after that data point was collected: exercise_data &lt;- PredictCrypto::calculate_percent_change(googlesheets_data, 7, &#39;days&#39;) Let’s take a peek at the new field: tail(exercise_data$target_percent_change, 10) ## [1] -21.577214 -22.986805 -14.995782 -3.220387 -8.205419 -16.015721 -16.911053 -12.801616 -16.444769 -17.383620 I could easily change this to a 14 day period: calculate_percent_change(googlesheets_data, 14, &#39;days&#39;) %&gt;% tail(10) %&gt;% select(target_percent_change) ## target_percent_change ## 10784 -16.13764 ## 10785 -13.74175 ## 10786 -16.13759 ## 10787 -10.74085 ## 10788 -17.04613 ## 10789 -23.68376 ## 10790 -33.13588 ## 10791 -31.61660 ## 10792 -35.65145 ## 10793 -29.77259 Or a 24 hour period: calculate_percent_change(googlesheets_data, 24, &#39;hours&#39;) %&gt;% tail(10) %&gt;% select(target_percent_change) ## target_percent_change ## 10849 -3.215170 ## 10850 2.203778 ## 10851 -1.520398 ## 10852 7.513390 ## 10853 -6.282062 ## 10854 -5.897307 ## 10855 -10.042910 ## 10856 1.571641 ## 10857 -2.066301 ## 10858 -2.626944 Disclaimer: Most of the code to follow was built using the content made available by Allison Hill from the RStudio::conf2020 intro to machine learning workshop and was not code I was familiar with before writing it for this internship application: https://education.rstudio.com/blog/2020/02/conf20-intro-ml/ https://conf20-intro-ml.netlify.com/materials/01-predicting/ 3.2.2 Feature scaling tic(&#39;Feature scaling&#39;) Before getting started on the predictive modeling section, it’s a good idea for us to scale the numeric data in our dataset. Some of the fields in the dataset are bound to have dramatically different ranges in their values: mean(exercise_data$roi30d, na.rm=T) ## [1] 20.22271 mean(exercise_data$cap_mrkt_cur_usd) ## [1] 17191065374 This can be problematic for some models (not every model has this issue), and the difference in the magnitude of the numbers could unfairly influence the model to think that the variable with the larger numbers is more statistically important than the one with the lesser values when that might not actually be true. For feature scaling, we need to do two things: Center the data in every column to have a mean of zero Scale the data in every column to have a standard deviation of one The recipes (Kuhn and Wickham 2020) package is a very useful package for pre-processing data before doing predictive modeling, and it allows us to center the way we do our data engineering around the independent variable we are looking to predict, which in our case is the target_percent_change. We can make a recipe which centers all numeric fields in the data using step_center() and then scale them using step_scale(). We will also remove the symbol column from the recipe using step_rm() because we don’t want to use it for the predictions but we don’t want to remove it from the dataset either: library(recipes) scaling_recipe &lt;- recipe(target_percent_change ~ ., data = exercise_data) %&gt;% step_center(all_numeric()) %&gt;% step_scale(all_numeric()) Commented out step_novel(all_nominal()), step_dummy(all_nominal()), step_nz(all_predictors()) because size too large and won’t run on PC or GitHub Actions. Now that we have made a data pre-processing recipe, let’s map it to the exercise_data dataset: crypto_data_scaled &lt;- scaling_recipe %&gt;% prep(exercise_data) crypto_data_scaled ## Data Recipe ## ## Inputs: ## ## role #variables ## outcome 1 ## predictor 46 ## ## Training data contained 10828 data points and 3120 incomplete rows. ## ## Operations: ## ## Centering for adr_act_cnt, blk_cnt, blk_size_byte, blk_size_mean_byte, cap_mrkt_cur_usd, diff_mean, ... [trained] ## Scaling for adr_act_cnt, blk_cnt, blk_size_byte, blk_size_mean_byte, cap_mrkt_cur_usd, diff_mean, ... [trained] Now let’s use bake() to put the old dataset in the oven and get back the scaled data 🍰: crypto_data_scaled &lt;- crypto_data_scaled %&gt;% bake(exercise_data) Now the values are scaled: head(crypto_data_scaled$cap_mrkt_cur_usd,5) ## [1] -0.4306519 -0.4306511 -0.4306502 -0.4310321 -0.4304881 You can see the difference from the previous values: head(exercise_data$cap_mrkt_cur_usd,5) ## [1] 86768713 86801326 86834707 71666978 93274716 toc() ## Feature scaling: 1.03 sec elapsed 3.2.3 Predictive Modeling tic(&#39;Predictive Modeling&#39;) We can create models using parsnip (Kuhn and Vaughan 2020), which is particularly nice because it gives a very standardized structure for a variety of models. Here’s the slightly over-complicated lm() linear regression model using parsnip: library(parsnip) lm_model &lt;- linear_reg() %&gt;% set_engine(&quot;lm&quot;) %&gt;% set_mode(&quot;regression&quot;) List of models to refer to: https://tidymodels.github.io/parsnip/articles/articles/Models.html Random Forest: random_forest_model &lt;- rand_forest(trees = 1000) %&gt;% set_engine(&quot;randomForest&quot;) %&gt;% set_mode(&quot;regression&quot;) XGBoost: xgboost_model &lt;- xgboost_parsnip &lt;- boost_tree(trees=1000) %&gt;% set_engine(&quot;xgboost&quot;) %&gt;% set_mode(&quot;regression&quot;) Remove the fields we will not be be using for the predictive modeling: exercise_data &lt;- exercise_data %&gt;% select(-date_time_utc, -date_time, -pkDummy, -pkey, -cap_real_usd, -cap_mvrv_cur) Before we can start fitting a predictive model, we need to create a train/test split, we can use rsample(Kuhn, Chow, and Wickham 2019) to put 80% of the data into crypto_train and 20% of the data in crypto_test: library(rsample) set.seed(250) crypto_data &lt;- initial_split(exercise_data, prop = 0.8) crypto_train &lt;- training(crypto_data) crypto_test &lt;- testing(crypto_data) Compare the number of rows: nrow(crypto_train) # 80% of rows ## [1] 8663 nrow(crypto_test) # 20% of rows ## [1] 2165 3.2.4 Fit the model: Now we can go ahead and train/fit the models to the data: library(modelr) lm_fitted &lt;- lm_model %&gt;% fit(target_percent_change ~ ., data=crypto_train) Random Forest: tic(&#39;Random Forest&#39;) random_forest_fitted &lt;- random_forest_model %&gt;% fit(target_percent_change ~ ., data = crypto_train) toc() ## Random Forest: 171.81 sec elapsed XGBoost: tic(&#39;XGBoost&#39;) xgboost_fitted &lt;- xgboost_model %&gt;% fit(price_usd ~ ., data=crypto_train) toc() ## XGBoost: 20.39 sec elapsed Use the trained model to make predictions on test data: library(tidymodels) ## -- Attaching packages -------------------------------------- tidymodels 0.1.0 -- ## v broom 0.5.4 v tune 0.0.1 ## v dials 0.0.4 v workflows 0.1.0 ## v infer 0.5.1 v yardstick 0.0.5 ## -- Conflicts ----------------------------------------- tidymodels_conflicts() -- ## x broom::bootstrap() masks modelr::bootstrap() ## x scales::discard() masks purrr::discard() ## x dplyr::filter() masks stats::filter() ## x recipes::fixed() masks stringr::fixed() ## x dplyr::lag() masks stats::lag() ## x yardstick::mae() masks modelr::mae() ## x yardstick::mape() masks modelr::mape() ## x dials::margin() masks ggplot2::margin() ## x yardstick::rmse() masks modelr::rmse() ## x yardstick::spec() masks readr::spec() ## x recipes::step() masks stats::step() ## x scales::yj_trans() masks recipes::yj_trans() lm_predictions &lt;- predict(lm_fitted, crypto_test) xgboost_predictions &lt;- xgboost_fitted %&gt;% predict(crypto_test) Join the full dataset back to the predictions: lm_predictions &lt;- lm_predictions %&gt;% bind_cols(crypto_test) xgboost_predictions &lt;- xgboost_predictions %&gt;% bind_cols(crypto_test) Get metrics: lm_predictions %&gt;% metrics(truth = target_percent_change, estimate = .pred) ## # A tibble: 3 x 3 ## .metric .estimator .estimate ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 rmse standard 16.9 ## 2 rsq standard 0.0357 ## 3 mae standard 11.0 xgboost_predictions %&gt;% metrics(truth = target_percent_change, estimate = .pred) ## # A tibble: 3 x 3 ## .metric .estimator .estimate ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 rmse standard 2463. ## 2 rsq standard 0.00299 ## 3 mae standard 875. 3.2.5 Now make one model for each cryptocurrency. Lots of code adapted from: https://r4ds.had.co.nz/many-models.html First I group the data by the cryptocurrency symbol: crypto_data_grouped &lt;- exercise_data %&gt;% group_by(symbol) %&gt;% nest() crypto_data_grouped ## # A tibble: 5 x 2 ## # Groups: symbol [5] ## symbol data ## &lt;chr&gt; &lt;list&gt; ## 1 ETH &lt;tibble [1,660 x 40]&gt; ## 2 BTC &lt;tibble [3,507 x 40]&gt; ## 3 LTC &lt;tibble [2,519 x 40]&gt; ## 4 DASH &lt;tibble [2,206 x 40]&gt; ## 5 BCH &lt;tibble [936 x 40]&gt; Make a helper function with the model so I can make the lm() model to apply to each cryptocurrency using purrr: grouped_linear_model &lt;- function(df) { lm(target_percent_change ~ ., data = df) } I could have made a more complex model here, but decided to keep things a bit simpler with linear regression Now we can use purrr(Henry and Wickham 2019) to apply the model to each element of the grouped dataframe: grouped_models &lt;- map(crypto_data_grouped$data, grouped_linear_model) The models can be added into the dataframe as nested lists. We can also add the corresponding residuals: crypto_data_grouped &lt;- crypto_data_grouped %&gt;% mutate(model=map(data,grouped_linear_model)) %&gt;% mutate(resids = map2(data, model, add_residuals)) Let’s look at the object again: crypto_data_grouped ## # A tibble: 5 x 4 ## # Groups: symbol [5] ## symbol data model resids ## &lt;chr&gt; &lt;list&gt; &lt;list&gt; &lt;list&gt; ## 1 ETH &lt;tibble [1,660 x 40]&gt; &lt;lm&gt; &lt;tibble [1,660 x 41]&gt; ## 2 BTC &lt;tibble [3,507 x 40]&gt; &lt;lm&gt; &lt;tibble [3,507 x 41]&gt; ## 3 LTC &lt;tibble [2,519 x 40]&gt; &lt;lm&gt; &lt;tibble [2,519 x 41]&gt; ## 4 DASH &lt;tibble [2,206 x 40]&gt; &lt;lm&gt; &lt;tibble [2,206 x 41]&gt; ## 5 BCH &lt;tibble [936 x 40]&gt; &lt;lm&gt; &lt;tibble [936 x 41]&gt; Let’s unnest the residuals to take a closer look: resids &lt;- unnest(crypto_data_grouped, resids) resids %&gt;% ggplot(aes(date, resid)) + geom_line(aes(group = symbol), alpha = 1 / 3) + geom_smooth(se = FALSE) + ylim(c(-20,20)) + facet_wrap(~symbol) 3.2.6 Add Metrics Now we can use broom (Robinson and Hayes 2020) to get all sorts of metrics back on the models: library(broom) crypto_models_metrics &lt;- crypto_data_grouped %&gt;% mutate(metrics=map(model,broom::glance)) %&gt;% unnest(metrics) Sort the new tibble by the best r squared values: crypto_models_metrics %&gt;% arrange(-r.squared) ## # A tibble: 5 x 15 ## # Groups: symbol [5] ## symbol data model resids r.squared adj.r.squared sigma statistic p.value df logLik AIC BIC deviance df.residual ## &lt;chr&gt; &lt;list&gt; &lt;list&gt; &lt;list&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;int&gt; ## 1 BCH &lt;tibble [9~ &lt;lm&gt; &lt;tibble [9~ 0.478 0.442 16.1 13.6 1.61e-54 37 -2378. 4833. 4998. 138706. 534 ## 2 ETH &lt;tibble [1~ &lt;lm&gt; &lt;tibble [1~ 0.300 0.279 15.1 14.5 3.62e-73 38 -5331. 10740. 10941. 285308. 1257 ## 3 DASH &lt;tibble [2~ &lt;lm&gt; &lt;tibble [2~ 0.213 0.196 15.5 12.5 1.95e-68 40 -7642. 15366. 15593. 434709. 1801 ## 4 LTC &lt;tibble [2~ &lt;lm&gt; &lt;tibble [2~ 0.193 0.179 16.8 13.7 3.99e-74 38 -9111. 18300. 18521. 595319. 2116 ## 5 BTC &lt;tibble [3~ &lt;lm&gt; &lt;tibble [3~ 0.151 0.142 12.5 15.4 1.51e-85 37 -12374. 24823. 25053. 484582. 3105 toc() ## Predictive Modeling: 196.25 sec elapsed 3.2.7 Plot Variable Importance Now I can use the vip (Greenwell, Boehmke, and Gray 2020) package to plot the variable importance: library(vip) library(vip) for (i in 1:length(crypto_models_metrics$symbol)){ print(paste(&quot;Now showing&quot;, crypto_models_metrics$symbol[[i]], &quot;variable importance:&quot;)) print(vip(crypto_models_metrics$model[[i]])) } ## [1] &quot;Now showing ETH variable importance:&quot; ## [1] &quot;Now showing BTC variable importance:&quot; ## [1] &quot;Now showing LTC variable importance:&quot; ## [1] &quot;Now showing DASH variable importance:&quot; ## [1] &quot;Now showing BCH variable importance:&quot; 3.2.8 If I were to keep going… Here are some of the next steps I would take if I were to keep going with this analysis: How much better do the models get if we add timeseries components like Moving Averages? Use parsnip + purrr to iterate through lots of predictive models rather than just applying a simple lm() model to each. How much better do the models get with hyperparameter tuning? I would use dials since it’s a part of tidymodels. Visualize the best model before and after parameter tuning and then do the same with the worst performing model. I would also go back to the train/test split and use 10-fold cross validation instead. 3.3 Build interactive learnr tutorials for Python using reticulate I think I could be a great fit for the third project listed related to creating learnr tutorials for Python using reticulate. I have a fair amount of experience in Python, but it’s never really clicked very much for as much as R in the past, and I am looking to step-up my Python skills. My Master’s in Data Science will work with Python a lot, and people immediately ask if I make tutorials in Python when I show them the R tutorials I have made, so this would be a great one for me to work on. I am also constantly told that Python is better than R for the incorrect reasons, and being more of an expert in Python would certainly help me debunk that myth when someone makes that argument. I am very familiar with the reticulate package and I have used it in the past in an RMarkdown file to make automated cryptocurrency trades through a Python package shrimpy-python, which worked really well: https://github.com/shrimpy-dev/shrimpy-python Since I have already demonstrated my familiarity with learnr tutorials in the previous section, I did not make a very extensive example here, but instead created a learnr tutorial with a Python code chunk instead: Return the total runtime of all of the examples above: toc() ## Total section 3 runtime: 243.35 sec elapsed References "],
["about-me.html", "4 About Me", " 4 About Me My formal education is more oriented towards business, but during my time in college I tried to focus on learning tangible skills as much as possible, and computer science/programming started becoming more my niche over time vs. business. I am working towards a Master’s in Data Science at the University of Denver and I live in Boulder, Colorado. I was born and raised in Milan, Italy and moved to the middle of Manhattan with my American mom when I was 16 where I finished highschool. I ended up coming to Boulder after reading a book about ultra marathon running and I could really see myself living in Boulder running with a husky dog training for ultra marathons, so that’s what I did: I also have an adorable little ferret: Percy I spent my time as an undergrad at the University of Colorado, Boulder studying information management and being a part of the CU Triathlon club team. As a Junior at CU I was one of the TA’s for MGMT 3200 (Business Analytics) after really enjoying the course, which used Alteryx for doing ETL work, and a tool called DataRobot for making predictions. The grade obtained by students in the class was strongly impacted by their team’s percentile ranking on the leaderboards of real Kaggle competitions that were going on at the time, and I found myself really loving working with data and I have been trying to learn as much as I can about anything and everything relating to data science since then. I spent multiple summers locking myself 40+ hours a week in my office working on just that. Here are some of the online courses I worked my way through: https://resclapon.com/datacamp-certificates https://resclapon.com/udemy-certificates Here is my resume with the same online learning certificates added to it: Thanks again to Nick Strayer for the awesome template In my senior year at CU Boulder, I did a business analytics internship with the Pricing Analytics team at Vail Resorts, which turned out to be a lot of manual work that should have been automated, so that’s what I did. After graduating from CU Boulder I spent some time applying the things I learned around automation and web scraping to setup a project to collect data relating to the cryptocurrency markets from several sources because I had been trading on them since early 2014 and I saw an opportunity for some automated trading, and I wanted to have a personal project that I could work on over a longer period of time and use to get more comfortable in tools like SQL, R and Python with the prospect of making some money in the end. After a year and a half of working on this, I realized that I was actually better off opening up my project to others more and using it as a tool to teach others to program and that could be really valuable in my career progression towards eventually being a competent data scientist rather than spending all of my energy trying to make short-term trades, which doesn’t really teach any tangible or useful skills outside of its own domain. The tutorials and lessons I am building specifically around this project can be found on https://predictcrypto.org/. Today I am working towards a master’s in Data Science part-time online and working on creating more research (including a more legitimate research paper with two professors) around the PredictCrypto project, and working on putting out more tutorials and content through a YouTube channel. My master’s program allows me to take one course at a time, be a full-time student, or do anything in between, so that flexibility allows me to work full-time without having an overwhelming schedule. "],
["ideal-tutorial.html", "5 Ideal Tutorial 5.1 Overview 5.2 Tutorials I Have Planned 5.3 Final notes", " 5 Ideal Tutorial 5.1 Overview I don’t see this question on the last post regarding the RStudio internship applications being open through March 6th, but I have been thinking about this question since I saw it originally posted here in November, so I wanted to include this answer in my application. Ultimately I think analyzing cryptocurrencies is fun and interesting and a good way to get people’s attention, but I have been thinking that a much more useful application of these ideas would be to be able to do a very similar thing but to create live data feeds from sensors out in the real world. This data could then be used to provide highly interactive programming tutorials, where the outcomes of the analysis would change based on the most recent data that was collected. To give a practical example of what that could look like, if there was a live data feed of sensors across Australia giving live information around particulates, carbon monoxide, ozone, carbon dioxide as well as other factors like informaton about the wind, etc.. it seems to me that this could empower things like early detection and much better prevention in general through predictive modeling and being able to triangulate the location of fires as they start or to figure out how to spread the limited resources across the different fires, and I just love the idea of the possibility of moving the needle on a problem through programming tutorials rather than working with uninteresting old data. Creating a system that allows people to actually contribute towards solving real problems might be wishful thinking, but I do believe that the best to teach someone these concepts is to give them data they care about and give them a realistic path forward to apply their existing intuition to answer questions they care about. The mtcars and iris datasets are great, but data feeds that change over time would be better in some cases in terms of getting a person invested in the actual analysis being done. 5.2 Tutorials I Have Planned As I was thinking through this question, I realized that beyond doing cool work around the data being used itself, I have a pretty lengthy list of topics that I feel are not always expressed as concisely as they should be. These topics have been covered by others in the past, but if I had a 5-10 minute video outlining things the way I plan on doing it, it would have saved me a lot of time, so hopefully even if I only reach a couple of people I will have saved them a lot of time, as well as myself whenever I want to go back to using any of these tools: Creating a website with bookdown, GitHub and Netlify: Conceptually speaking this is amazingly simple to implement if you just know where to click in GitHub + RStudio and does things that would be pretty difficult to achieve with older tools. GitHub actions for automation: This is a pretty new topic because GitHub Actions have been very recently introduced and most resources online make this way overcomplicated and/or they are not usually specific to R. It’s actually not that difficult though and it makes a ton of sense conceptually, especially when using devtools::check(), and is a general tool that can be used for all sorts of automation. In fact, it would be a terrible experience, but you could program in R without needing your own computer by using GitHub actions. I was running into an issue I did not understand when using GitHub actions with bookdown files because of the default argument clean_envir=FALSE when running render_book(), and I documented the issue here: https://community.rstudio.com/t/github-actions-object-from-secrets-not-found/54519/5 After making a video tutorial around making a website with bookdown, I plan on using that project to explain github actions in another video. Using blogdown and pagedown Making an R package Creating tests to go along with an R package: Including code coverage and having the custom badge on the GitHub page refreshed through GitHub actions General overview of how to use GitHub with RStudio: In companies you would have a development space and a production environment and I see my personal use of GitHub + RStudio as being very similar to that. When you make changes locally it’s conceptually similar to a dev environment, and when you push things to GitHub those changes are published to the production environment where it has downstream effects, for example triggering a new build for a website. Setting up R + RStudio + GitHub: Downloading R Downloading RStudio Downloading GitHub and pointing the global options within RStudio to point to git.exe to prompt RStudio to ask for login and create the Git tab in the IDE Flexdashboards Web Scraping Using RStudio Add-Ins and coolest ones Awesome ggplot2 extensions: trelliscope rayshader + rayrender ggmap gganimate gghighlight … LOTS more Understanding the tidyverse. Here’s a quick example of the things I would really drive home in a tutorial around the tidyverse and when/why you would want to use the pipe operator: Take the following example: sqrt(25) ## [1] 5 Here it is easy enough to keep track of what is happening. We are taking the square root of 25 and nothing more. But let’s say we have a more complex operation: abs(exp(sqrt(25))) ## [1] 148.4132 As the code gets more complicated, it gets more difficult to read the code. What order do the operations run? Things can get pretty out of hand, this is not a particularly extreme example. In comes the pipe operator! Using the %&gt;% we start with the value being manipulated, and apply each operation one step at a time: 25 %&gt;% sqrt() %&gt;% exp() %&gt;% abs() ## [1] 148.4132 Now it becomes much clearer that our code starts with the value 25 and the functions are applied in the order sqrt(), exp(), abs(). When we work with a full dataset, this will also work much better because it will be much easier to distinguish between the data we want to apply a transformation to and the actual transformation. Let’s walk through one more example to illustrate this idea. Let’s make a very simple example dataset: data &lt;- data.frame(&quot;numbers&quot;=c(3,7,9)) data ## numbers ## 1 3 ## 2 7 ## 3 9 Without using the pipe operator, this is what the usage of the filter() function would look like: filter(data, numbers &gt; 7) ## numbers ## 1 9 Treating the object data within the filter() function is not clear. Using the pipe operator, this operation becomes more clear: data %&gt;% filter(numbers &gt; 7) ## numbers ## 1 9 To make this point clear, try to translate this code to english in your head: round(log(sqrt(filter(data, numbers &gt; 7))),3) ## numbers ## 1 1.099 Not exactly straightforward right? Now try to translate this code in your head and see if it is easier at all: data %&gt;% filter(numbers &gt; 7) %&gt;% sqrt() %&gt;% log() %&gt;% round(3) ## numbers ## 1 1.099 You could read this line by line as: Start with the dataframe object called data Filter the rows based on the column called numbers having a value larger than 7 Take the square root of the result Take the log of the result Round the result by 3 decimal places 5.3 Final notes I would also have a version of each planned tutorial recorded in Italian, because I am bilingual and most of this content does not currently exist in Italian as far as I can tell. "],
["cool-charts.html", "6 Cool Charts 6.1 Price USD - Last 7 Days - BTC 6.2 Git Commits Last 90 Days - ETH 6.3 Percent Change Over Next 6 Hours - Last 7 Days - Top 5 Ranked 6.4 Plotting the relationship between previous 24h % change and next 24h % change - Bitcoin 6.5 Percent Change Over Next 12 Hours - Last 7 Days - Top 100 Ranked 6.6 Percent Change Over Next 24 Hours - By Date 6.7 Rows collected by Mining Algorithm - Top 15 Ranked", " 6 Cool Charts Some examples of using ggplot2 extensions like plotly (Sievert et al. 2019) and rayshader (Morgan-Wall 2020) to make cool visualizations. tic(&#39;Cool charts section&#39;) 6.1 Price USD - Last 7 Days - BTC plot &lt;- ggplot(subset(cryptoData, Name == &#39;Bitcoin&#39;), aes(x = DateTimeUTC, y = PriceUSD)) + geom_jitter(alpha=0.75, colour=&#39;deepskyblue4&#39;) + labs(title=paste(&#39;Bitcoin&#39;, &#39; - Price USD&#39;), x=&#39;DateTime MST (Colorado Time)&#39;, y=&#39;% Change Vs. USD ($)&#39;) + geom_smooth(colour=&#39;coral3&#39;) + theme_economist() ggplotly(plot) &lt;div id=\"htmlwidget-55f6ed115eaf8c3126f9\" style=\"width:672px;height:480px;\" class=\"plotly html-widget\"> 6.2 Git Commits Last 90 Days - ETH plot &lt;- ggplot(filter(cryptoData, Name == &#39;Ethereum&#39;), aes_string(x = &quot;DateTimeUTC&quot;, y = &#39;Git_CommitsLast90Days&#39;)) + geom_line(size = 1, alpha=0.75, colour=&#39;darkslateblue&#39;) + labs(title=paste(&#39;Ethereum&#39;, &#39; - &#39;, &#39;Git_CommitsLast90Days&#39;), x=&#39;DateTime MST (Colorado Time)&#39;) + geom_smooth() ggplotly(plot) &lt;div id=\"htmlwidget-9f8675dac59bdd076aa1\" style=\"width:672px;height:480px;\" class=\"plotly html-widget\"> 6.3 Percent Change Over Next 6 Hours - Last 7 Days - Top 5 Ranked This chart plots the % change for the 6 hour period after it was collected. plot &lt;- ggplot(filter(targetData, Rank &gt;= 1, Rank &lt;= 5 ), aes(x = DateTimeUTC, y = TargetPercChange, colour=Name)) + geom_jitter(alpha=0.75) + labs(x=&#39;DateTime MST (Colorado Time)&#39;, y=&#39;6h % Change Vs. USD ($)&#39;) + geom_smooth(aes(group=Name), se=F) + theme_solarized(light=F) ggplotly(plot) &lt;div id=\"htmlwidget-0646698ad0fadda33463\" style=\"width:672px;height:480px;\" class=\"plotly html-widget\"> 6.4 Plotting the relationship between previous 24h % change and next 24h % change - Bitcoin plot &lt;- ggplot(subset(targetData24, Name == &#39;Bitcoin&#39;), aes(x = PercChange24hVsUSD, y = TargetPercChange)) + geom_jitter(alpha=0.75, colour=&#39;deepskyblue4&#39;) + labs(title=&#39;Bitcoin&#39;, x=&#39;% Change Previous 24h vs. $&#39;, y=&#39;% Change Next 24h vs. $&#39;) + geom_smooth(colour=&#39;coral3&#39;,se=F) + theme_wsj() ggplotly(plot) &lt;div id=\"htmlwidget-944f640a70811f101ccf\" style=\"width:672px;height:480px;\" class=\"plotly html-widget\"> # output$pricePlotStats &lt;- renderPlot({ # ggscatterstats(data = filter(targetData24, Name == input$cryptocurrencyNameRel), x = PercChange24hVsUSD, y = TargetPercChange, messages=F) # }) 6.5 Percent Change Over Next 12 Hours - Last 7 Days - Top 100 Ranked &lt;div id=\"htmlwidget-856b74456bd6143ec013\" style=\"width:672px;height:480px;\" class=\"plotly html-widget\"> 6.6 Percent Change Over Next 24 Hours - By Date 6.7 Rows collected by Mining Algorithm - Top 15 Ranked &lt;div id=\"htmlwidget-527de51ba08238bee282\" style=\"width:672px;height:480px;\" class=\"plotly html-widget\"> ## [1] TRUE toc() ## Cool charts section: 19.42 sec elapsed References "],
["references.html", "References", " References "]
]
